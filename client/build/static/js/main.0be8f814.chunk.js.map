{"version":3,"sources":["base.js","components/Navbar/index.js","Home.js","Auth.js","Login.js","Register.js","Private.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","apiKey","process","authDomain","databaseURL","projectId","REACT_APP_PROTECT_ID","storageBucket","messagingSenderId","Nav","className","to","window","location","pathname","Home","onClick","auth","signOut","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","onAuthStateChanged","Provider","value","withRouter","history","handleLog","useCallback","event","a","preventDefault","target","elements","email","password","signInWithEmailAndPassword","push","alert","useContext","onSubmit","name","type","placeholder","handleReg","createUserWithEmailAndPassword","Private","RouteComponent","component","rest","render","routeProps","App","exact","path","Login","Register","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0be8f814.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst app = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE, \n    projectId: process.env.REACT_APP_PROTECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\n});\n\nexport default app; ","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './style.css';\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Social Match Dating App\n      </Link>\n      <div>\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link\n              to=\"/\"\n              className={\n                window.location.pathname === '/' ||\n                window.location.pathname === '/rate'\n                  ? 'nav-link active'\n                  : 'nav-link'\n              }\n            >\n              Rate your Date\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link\n              to=\"/profile\"\n              className={\n                window.location.pathname === '/profile'\n                  ? 'nav-link-active'\n                  : 'nav-link'\n              }\n            >\n              Profile\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport app from \"./base\";\nimport Nav from \"./components/Navbar\";\nimport \"./home.css\";\n\nconst Home = () => {\n  return (\n    <>\n      <Nav/>\n\n      {<button onClick={() => app.auth().signOut()}>Sign Out </button>}\n    </>\n  );\n};\n\nexport default Home;\n","import React, {useEffect, useState} from \"react\";\nimport app from \"./base.js\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({children}) => {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    app.auth().onAuthStateChanged(setCurrentUser);\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React, { useCallback, useContext } from \"react\";\nimport { withRouter, Redirect } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport app from \"./base.js\";\nimport { AuthContext } from \"./Auth.js\";\n\nconst SignIn = ({ history }) => {\n  const handleLog = useCallback(\n    async event => {\n      event.preventDefault();\n      const { email, password } = event.target.elements;\n      try {\n        await app\n          .auth()\n          .signInWithEmailAndPassword(email.value, password.value);\n        history.push(\"/\");\n      } catch (err) {\n        alert(err);\n      }\n    },\n    [history]\n  );\n\n  const { currentUser } = useContext(AuthContext);\n\n  if (currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div>\n      <h1 className=\"animated flipInX\">Social Match</h1>\n      <h1 className=\"login\">Sign in</h1>\n      <form onSubmit={handleLog}>\n        <label>\n          Email:{\" \"}\n          <input name=\"email\" type=\"email\" placeholder=\"\" className=\"email\" />\n        </label>{\" \"}\n        <label>\n          Password:{\" \"}\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"\"\n            className=\"password\"\n          />\n        </label>{\" \"}\n        <button type=\"submit\">Log In </button>{\" \"}\n        <Link to=\"/Register\">Register</Link>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(SignIn);\n","import React, {useCallback} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {withRouter} from \"react-router\";\nimport app from \"./base\";\n\nconst Register = ({history}) => {\n  const handleReg = useCallback(\n    async event => {\n      event.preventDefault();\n      const {email, password} = event.target.elements;\n      try {\n        await app\n          .auth()\n          .createUserWithEmailAndPassword(email.value, password.value);\n        history.push(\"/\");\n      } catch (err) {\n        alert(err);\n      }\n    },\n    [history]\n  );\n  return (\n    <div>\n      <h1 className=\"register\">Register</h1>\n      <form onSubmit={handleReg}>\n        <label>\n          Email\n          <input name=\"email\" type=\"email\" placeholder=\"\" />\n        </label>\n        <label>\n          Password\n          <input name=\"password\" type=\"password\" placeholder=\"\" />\n        </label>\n        <button type=\"submit\">Sign Up</button>\n        <Link to=\"/Login\">Login</Link>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(Register);\n","import React, {useContext} from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {AuthContext} from \"./Auth\";\n\nconst Private = ({component: RouteComponent, ...rest}) => {\n  const {currentUser} = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        !!currentUser ? (\n          <RouteComponent {...routeProps} />\n        ) : (\n          <Redirect to={\"/login\"} />\n        )\n      }\n    />\n  );\n};\n\nexport default Private;\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './Home';\nimport Login from './Login';\nimport Register from './Register';\n// import Profile from './pages/Profile';\nimport {AuthProvider} from './Auth';\nimport Private from './Private';\nimport './index.css';\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        {/* <h1 className=\"animated flipInX\">Social Match</h1> */}\n        <div>\n          <Private exact path=\"/\" component={Home} />\n          <Route exact path=\"/Login\" component={Login} />\n          <Route exact path=\"/Register\" component={Register} />\n          {/* <Route exact path=\"/Profile\" component={Profile} /> */}\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}